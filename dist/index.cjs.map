{"version":3,"sources":["../src/index.ts","../src/stories/Dropdown/index.tsx","../src/stories/Badge/index.tsx","../src/stories/Input/index.tsx"],"sourcesContent":["export * from './stories/Dropdown';\r\nexport * from './stories/Badge';\r\nexport * from './stories/Input';\r\n","import { ChevronDown, CircleX, Search } from 'lucide-react';\nimport { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Badge } from '../Badge';\nimport { Input } from '../Input';\ninterface Option {\n  id: number;\n  label: string;\n  value: string;\n}\n\ninterface DropdownProps {\n  options: Option[];\n  withSearch?: boolean;\n  multiple?: boolean;\n  renderOption?: (option: Option, isSelected: boolean) => React.ReactNode;\n  withPortal?: boolean;\n}\n\nexport const Dropdown = ({\n  options,\n  withSearch,\n  multiple,\n  renderOption,\n  withPortal,\n}: DropdownProps) => {\n  const [open, setOpen] = useState(false);\n  const [query, setQuery] = useState('');\n  const [selectedOptions, setSelectedOptions] = useState<Option[]>([]);\n  const [selectedOption, setSelectedOption] = useState<Option | null>(null);\n\n  const filteredOptions = options.filter((option) =>\n    option.label.toLowerCase().includes(query.toLowerCase())\n  );\n\n  const handleSelect = (option: Option) => {\n    if (multiple) {\n      setSelectedOptions((prev) =>\n        prev.some((o) => o.id === option.id)\n          ? prev.filter((o) => o.id !== option.id)\n          : [...prev, option]\n      );\n    } else {\n      setSelectedOption(option);\n      setOpen(false);\n    }\n  };\n\n  const isSelected = (option: Option) =>\n    multiple\n      ? selectedOptions.some((selectedOption) => selectedOption.id === option.id)\n      : selectedOption?.id === option.id;\n\n  const content = (\n    <div className=\"absolute w-full bg-white border mt-1 rounded-sm shadow-md z-[1100]\">\n      {withSearch && (\n        <div className=\"border-b p-2 flex items-center\">\n          <Search className=\"text-gray-400\" />\n          <Input\n            className=\"w-full pl-2 outline-none\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n          />\n          {query && (\n            <CircleX className=\"text-gray-500 cursor-pointer\" onClick={() => setQuery('')} />\n          )}\n        </div>\n      )}\n\n      <div className=\"flex flex-col\">\n        {filteredOptions.map((option) => (\n          <Badge\n            key={option.id}\n            onClick={() => handleSelect(option)}\n            className={isSelected(option) ? 'bg-gray-200' : ''}\n          >\n            {renderOption ? renderOption(option, isSelected(option)) : option.label}\n          </Badge>\n        ))}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"relative\">\n      <div\n        className=\"border rounded-sm p-2 flex justify-between items-center cursor-pointer border-gray-400 hover:border-gray-500\"\n        onClick={() => setOpen((open) => !open)}\n      >\n        <div className=\"flex gap-2\" onClick={(e) => e.stopPropagation()}>\n          {multiple\n            ? selectedOptions.map((selectedOption) => (\n                <div\n                  key={selectedOption.id}\n                  className=\" bg-gray-100 gap-1 p-2 rounded-4xl flex items-center\"\n                >\n                  {selectedOption.label}\n                  <CircleX\n                    size={18}\n                    onClick={() => {\n                      setSelectedOptions((prev) =>\n                        prev.filter((option) => option.id !== selectedOption.id)\n                      );\n                    }}\n                  />\n                </div>\n              ))\n            : selectedOption?.label}\n        </div>\n        <ChevronDown />\n      </div>\n      {open && (withPortal ? createPortal(content, document.body) : content)}\n    </div>\n  );\n};\n","interface BadgeProps {\n  id?: string | number;\n  onClick?: () => void;\n  className?: string;\n  children: React.ReactNode;\n  variant?: 'primary' | 'secondary';\n}\n\nconst variantClasses = {\n  primary: 'bg-gray-100 text-black hover:bg-gray-300',\n  secondary: 'bg-red-400 text-white hover:bg-red-600',\n};\n\nexport const Badge = ({ id, onClick, className, children, variant = 'primary' }: BadgeProps) => {\n  return (\n    <div\n      key={id}\n      onClick={onClick}\n      className={`p-2 inline-block cursor-pointer rounded ${variantClasses[variant]} ${className}`}\n    >\n      {children}\n    </div>\n  );\n};\n","interface InputProps {\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  className?: string;\n}\n\nexport const Input = ({\n  value,\n  onChange,\n  placeholder = '',\n  className = '',\n  ...props\n}: InputProps) => {\n  return (\n    <div className={`${className}`}>\n      <label />\n      <input\n        type=\"text\"\n        className=\"flex-1 outline-none\"\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        {...props}\n      />\n    </div>\n  );\n};\n"],"mappings":"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","names":["import_jsx_runtime","import_jsx_runtime","selectedOption","open"]}